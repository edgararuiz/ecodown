% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clone-convert.R
\name{ecodown_clone_convert}
\alias{ecodown_clone_convert}
\title{Clones repo and builds documentation}
\usage{
ecodown_clone_convert(
  repo_url = "",
  quarto_sub_folder = path_file(repo_url),
  quarto_folder = here::here(),
  version_folder = "",
  convert_readme = TRUE,
  convert_news = TRUE,
  convert_articles = TRUE,
  convert_reference = TRUE,
  reference_folder = "reference",
  vignettes_folder = "articles",
  downlit_options = TRUE,
  site_url = qe(quarto_folder, "site", "site-url"),
  commit = c("latest_tag", "latest_commit"),
  target_folder = tempdir(),
  branch = "main",
  reference_examples = TRUE,
  verbosity = c("verbose", "summary", "silent"),
  versions = list()
)
}
\arguments{
\item{repo_url}{Repo location}

\item{quarto_sub_folder}{Sub folder in \code{quarto_folder} that will be the base for
the package's documentation.}

\item{quarto_folder}{Base target Quarto folder. Defaults to current workspace.}

\item{version_folder}{Folder path to save the documentation version. Examples
are: "latest", "dev", "v1.0". Defaults to empty.}

\item{convert_readme}{Flag that indicates if the README file needs to be processed}

\item{convert_news}{Flag that indicates if the NEWS file needs to be processed}

\item{convert_articles}{Flag that indicates if the vignette files needs to be processed}

\item{convert_reference}{Flag that indicates if the help files needs to be processed}

\item{reference_folder}{The sub folder where the reference files will be placed.
Defaults to "reference".}

\item{vignettes_folder}{The sub folder where the vignette files will be placed.
Defaults to "articles".}

\item{downlit_options}{Flag that indicates if the package name should be
added to the 'options()' that tells 'downlit' that this is an internal
package}

\item{site_url}{URL of the target site.  It defaults to using the address in
the '_quarto.yml' file}

\item{commit}{Commit to use as the base for the documentation.  It defaults
to 'latest_tag'. That default will search for the latest Git tag.  The
assumption is that the latest tag is the same as the latest release.  This
way we avoid documenting work-in-progress.  The 'latest_commit' value will
simply use whatever is cloned. Pass an SHA value if you wish to fix the
commit to use.}

\item{target_folder}{Location to copy the package to. Defaults to a temporary
directory}

\item{branch}{Repo branch. Defaults to 'main'}

\item{reference_examples}{Boolean flag to indicate if the Examples inside the
reference page is to be evaluated.}

\item{verbosity}{Level of messaging available during run time. Possible values
are 'verbose', 'summary', and 'silent'.}

\item{versions}{A list of additional reference versions to convert.
Pass the commit to use, the name of the version, and the sub-folder to use. It
expects a named list object. Example:
list(list(commit = "latest_commit", path = "dev"))}
}
\description{
Clones repo and builds documentation
}
